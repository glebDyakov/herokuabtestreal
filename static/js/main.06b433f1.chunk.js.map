{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","allUsers","userID","userDateRegistration","userDateLastActivity","retentionDay","resultOfRetentionDay","componentWillMount","e","a","fetch","mode","method","then","response","body","rb","reader","getReader","ReadableStream","start","controller","push","read","done","value","console","log","close","enqueue","stream","Response","headers","text","result","setState","JSON","parse","length","calculateRollingRetentionXDay","saveUsers","window","location","reload","setRetentionDay","target","setUserID","setUserDateRegistration","setUserDateLastActivity","border","width","onChange","this","type","id","class","placeholder","required","map","user","userid","dateregistration","datelastactivity","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b433f1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends React.Component {\n  state = {\n    allUsers: [],\n    userID: '',\n    userDateRegistration: '',\n    userDateLastActivity: '',\n    retentionDay: 5,\n    resultOfRetentionDay: 0\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      allUsers: [],\n      userID: '',\n      userDateRegistration: '',\n      userDateLastActivity: '',\n      retentionDay: 5,\n      resultOfRetentionDay: 0\n    };\n  }\n\n  componentWillMount = async (e) => {\n    await fetch(`http://localhost:4000/`, {\n          mode: 'cors',\n          method: 'GET'\n        }).then(response => response.body).then(rb  => {\n          const reader = rb.getReader()\n          return new ReadableStream({\n            start(controller) {\n              function push() {\n                reader.read().then( ({done, value}) => {\n                  if (done) {\n                    console.log('done', done);\n                    controller.close();\n                    return;\n                  }\n                  controller.enqueue(value);\n                  console.log(done, value);\n                  push();\n                })\n              }\n              push();\n            }\n          });\n      }).then(stream => {\n          return new Response(stream, { headers: { \"Content-Type\": \"text/html\" } }).text();\n        })\n        .then(result => {\n          console.log(result);\n          this.setState({\n            allUsers: JSON.parse(result)\n          })\n          console.log('allUsers', this.state.allUsers)\n          console.log('allUsers Legnth', this.state.allUsers.length)\n        });\n      }\n      calculateRollingRetentionXDay = async () => {\n        await fetch(`http://localhost:4000/calculateretentionxday?retentionday=${this.state.retentionDay}`, {\n              mode: 'cors',\n              method: 'GET'\n            }).then(response => response.body).then(rb  => {\n              const reader = rb.getReader()\n              return new ReadableStream({\n                start(controller) {\n                  function push() {\n                    reader.read().then( ({done, value}) => {\n                      if (done) {\n                        console.log('done', done);\n                        controller.close();\n                        return;\n                      }\n                      controller.enqueue(value);\n                      console.log(done, value);\n                      push();\n                    })\n                  }\n                  push();\n                }\n              });\n          }).then(stream => {\n              return new Response(stream, { headers: { \"Content-Type\": \"text/html\" } }).text();\n            })\n            .then(result => {\n              // window.location.reload( )\n              console.log(result)\n              this.setState({\n                resultOfRetentionDay: JSON.parse(result).result\n              })\n            });\n      }\n      saveUsers = async () => {\n        console.log('save users!!!');\n        await fetch(`http://localhost:4000/users/add?userid=${this.state.userID}&userdateregistration=${this.state.userDateRegistration}&userdatelastactivity=${this.state.userDateLastActivity}`, {\n              mode: 'cors',\n              method: 'GET'\n            }).then(response => response.body).then(rb  => {\n              const reader = rb.getReader()\n              return new ReadableStream({\n                start(controller) {\n                  function push() {\n                    reader.read().then( ({done, value}) => {\n                      if (done) {\n                        console.log('done', done);\n                        controller.close();\n                        return;\n                      }\n                      controller.enqueue(value);\n                      console.log(done, value);\n                      push();\n                    })\n                  }\n                  push();\n                }\n              });\n          }).then(stream => {\n              return new Response(stream, { headers: { \"Content-Type\": \"text/html\" } }).text();\n            })\n            .then(result => {\n              window.location.reload( )\n            });\n          }\n          setRetentionDay = (e) => {\n            this.setState({\n              retentionDay: e.target.value\n            })\n          }\n\n          setUserID = (e) => {\n            this.setState({\n              userID: e.target.value\n            })\n            console.log(e)\n            console.log(this.state)\n          }\n          setUserDateRegistration = (e) => {\n            this.setState({\n              userDateRegistration: e.target.value,\n            })\n            console.log(this.state)\n          }\n          setUserDateLastActivity = (e) => {\n            this.setState({\n              userDateLastActivity: e.target.value\n            })\n            console.log(this.state)\n          }\n      render(){\n        return (\n          <div>\n            <table border=\"1\">\n            <tr>\n                <td  width=\"300\">\n                  UserID\n                </td>\n                <td  width=\"300\">\n                  Date Registration\n                </td>\n                <td  width=\"300\">\n                  Date Last Activity\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <input onChange={ this.setUserID } type=\"text\" id=\"\" class=\"userpassword form-control\" placeholder=\"UserID\" required=\"\" />\n                </td>\n                <td>\n                  <input onChange={this.setUserDateRegistration} type=\"text\" id=\"\" class=\"userpassword form-control\" placeholder=\"UserDateRegistration\" required=\"\" />\n                </td>\n                <td>\n                  <input onChange={this.setUserDateLastActivity} type=\"text\" id=\"\" class=\"form-control\" placeholder=\"UserDateLastActivity\" required=\"\" /> \n                </td>\n              </tr>\n            </table>\n            <div>\n              {\n                this.state.allUsers.length <= 0\n                ?\n                  <p>Нет пользователей</p>\n                :\n                  this.state.allUsers.map((user) => {\n                    return (\n                      <table border=\"1\" key={user.userid}>\n                        <tr>\n                          <td  width=\"300\">\n                          { user.userid } \n                          </td>\n                          <td  width=\"300\">\n                          { user.dateregistration  } \n                          </td>\n                          <td  width=\"300\"  >\n                            { user.datelastactivity } \n                          </td>\n                        </tr>\n                      </table>\n                    )\n                  })\n              }      \n            </div>\n            <button class=\"btn btn-lg btn-primary btn-block\" onClick={this.saveUsers}>Save</button>\n            <br/> \n            <label class=\"sr-only\">retentionDay</label>\n            <input onChange={ this.setRetentionDay } value={ this.state.retentionDay } type=\"text\" id=\"\" class=\"userpassword form-control\" placeholder=\"retentionDay\" required=\"\" />\n            <button class=\"btn btn-lg btn-primary btn-block\" onClick={this.calculateRollingRetentionXDay}>Calculate</button>\n            <p>результат retentionDay = { this.state.resultOfRetentionDay }</p>\n          </div>\n        );\n      }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}